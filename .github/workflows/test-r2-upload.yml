name: Test R2 Upload (non-han only)

on:
  workflow_dispatch: # Manual trigger only

jobs:
  test-upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build Rust project
        run: |
          echo "üî® Building Rust project..."
          cargo build --release

      - name: Run dictionary build for non-han shard
        run: |
          echo "üéØ Building dictionary shard: non-han..."
          echo "‚è±Ô∏è  Start time: $(date)"
          cargo run --release --bin merge_dictionaries -- --individual-files --optimize --mode non-han
          echo "‚è±Ô∏è  End time: $(date)"

      - name: Verify output
        run: |
          SHARD_DIR="output_non-han"
          if [ ! -d "$SHARD_DIR" ]; then
            echo "‚ùå Error: Output directory $SHARD_DIR not found!"
            exit 1
          fi
          
          FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
          TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)
          echo "‚úÖ Generated $FILE_COUNT JSON files in $SHARD_DIR"
          echo "üì¶ Total size: $TOTAL_SIZE"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "‚ùå Error: No JSON files generated!"
            exit 1
          fi

      - name: Install AWS CLI
        run: |
          echo "üì• Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Upload to Cloudflare R2 using S3 API
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          SHARD_DIR="output_non-han"
          BUCKET_NAME="kiokun-dict"

          echo "‚òÅÔ∏è Uploading to Cloudflare R2..."
          echo "   Bucket: $BUCKET_NAME"
          echo "   Shard: non-han"

          # Count files before upload
          FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
          TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)

          echo "   Files: $FILE_COUNT"
          echo "   Size: $TOTAL_SIZE"

          # R2 endpoint URL (S3-compatible)
          ENDPOINT_URL="https://${CLOUDFLARE_ACCOUNT_ID}.r2.cloudflarestorage.com"

          echo "üì§ Starting batch upload using AWS S3 sync..."
          echo "‚è±Ô∏è  Upload start time: $(date)"

          # Use AWS S3 sync for fast batch upload
          aws s3 sync "$SHARD_DIR" "s3://$BUCKET_NAME/non-han" \
            --endpoint-url "$ENDPOINT_URL" \
            --only-show-errors

          echo "‚è±Ô∏è  Upload end time: $(date)"
          echo "‚úÖ Upload complete!"
          echo "   Files are now available at: https://pub-3cf0f772ecad4e0fbb2a59a0ea02df4e.r2.dev/non-han/{word}.json"

      - name: Test a few files
        run: |
          echo "üß™ Testing random files from R2..."
          
          # Test 3 random files
          curl -f "https://pub-3cf0f772ecad4e0fbb2a59a0ea02df4e.r2.dev/non-han/hello.json" || echo "‚ùå hello.json not found"
          curl -f "https://pub-3cf0f772ecad4e0fbb2a59a0ea02df4e.r2.dev/non-han/„ÅÇ.json" || echo "‚ùå „ÅÇ.json not found"
          curl -f "https://pub-3cf0f772ecad4e0fbb2a59a0ea02df4e.r2.dev/non-han/test.json" || echo "‚ùå test.json not found (expected)"

      - name: Summary
        if: always()
        run: |
          echo "üìä Test Summary"
          echo "================================"
          SHARD_DIR="output_non-han"
          if [ -d "$SHARD_DIR" ]; then
            FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
            TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)
            echo "Files generated: $FILE_COUNT"
            echo "Total size: $TOTAL_SIZE"
            echo "Shard: non-han (smallest shard for testing)"
          else
            echo "‚ùå Build failed - no output directory"
          fi

