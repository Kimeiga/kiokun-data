name: Build Dictionaries (Matrix)

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: "0 0 1 * *" # Run monthly

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard-type: [non-han, han-1char, han-2char, han-3plus]
      fail-fast: false # Continue other shards even if one fails
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build Rust project
        run: |
          echo "üî® Building Rust project..."
          cargo build --release

      - name: Run dictionary build for ${{ matrix.shard-type }}
        run: |
          echo "üéØ Building dictionary shard: ${{ matrix.shard-type }}..."
          cargo run --release --bin merge_dictionaries -- --individual-files --optimize --mode ${{ matrix.shard-type }}

      - name: Verify output
        run: |
          SHARD_DIR="output_${{ matrix.shard-type }}"
          if [ ! -d "$SHARD_DIR" ]; then
            echo "‚ùå Error: Output directory $SHARD_DIR not found!"
            exit 1
          fi
          
          FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
          echo "‚úÖ Generated $FILE_COUNT JSON files in $SHARD_DIR"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "‚ùå Error: No JSON files generated!"
            exit 1
          fi

      - name: Setup Git for deployment
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Deploy to target repository (orphan branch strategy)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OUTPUT_REPO="Kimeiga/kiokun-dict-${{ matrix.shard-type }}"
          SHARD_DIR="output_${{ matrix.shard-type }}"

          echo "üì¶ Deploying to $OUTPUT_REPO using orphan branch strategy..."

          # Create a fresh directory for the target repo
          mkdir -p deploy-repo
          cd deploy-repo

          # Initialize a new Git repo with orphan branch (no history)
          git init
          git checkout --orphan main

          # Copy all dictionary files using rsync (handles large number of files)
          echo "üìÅ Copying dictionary files..."
          rsync -a ../$SHARD_DIR/ .

          # Count files
          FILE_COUNT=$(find . -name "*.json" | wc -l)
          TOTAL_SIZE=$(du -sh . | cut -f1)

          echo "‚úÖ Prepared $FILE_COUNT files ($TOTAL_SIZE)"

          # Add all files
          echo "‚ûï Adding files to Git..."
          git add -A

          # Commit
          echo "üíæ Creating commit..."
          git commit -m "Dictionary data for ${{ matrix.shard-type }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          # Set remote and force push (replaces all history)
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${OUTPUT_REPO}.git"

          echo "üöÄ Force pushing to repository..."
          git push -f origin main

          cd ..

          echo "‚úÖ Deployment complete!"
          echo "   Files are now available at: https://cdn.jsdelivr.net/gh/${OUTPUT_REPO}@latest/{word}.json"

      - name: Summary
        if: always()
        run: |
          echo "üìä Build Summary for ${{ matrix.shard-type }}"
          echo "================================"
          SHARD_DIR="output_${{ matrix.shard-type }}"
          if [ -d "$SHARD_DIR" ]; then
            FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
            TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)
            echo "Files generated: $FILE_COUNT"
            echo "Total size: $TOTAL_SIZE"
            echo "Target repo: Kimeiga/japanese-dict-${{ matrix.shard-type }}"
          else
            echo "‚ùå Build failed - no output directory"
          fi

