name: Deploy to GitHub Repos (Retry with Fix)

on:
  workflow_dispatch: # Manual trigger only

jobs:
  deploy-shard:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard-type: [non-han, han-1char, han-2char, han-3plus]
      fail-fast: false # Continue other shards even if one fails
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download dictionary data files
        run: |
          echo "üì• Downloading JMdict data files from GitHub releases..."
          mkdir -p data

          # Download JMdict English with examples (118 MB uncompressed)
          curl -L "https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1%2B20251013122507/jmdict-examples-eng-3.6.1+20251013122507.json.tgz" -o /tmp/jmdict-examples.tgz
          tar -xzf /tmp/jmdict-examples.tgz -C data/
          mv data/jmdict-examples-eng-3.6.1+20251013122507.json data/jmdict-examples-eng-3.6.1.json

          # Download Kanjidic2 English (14 MB uncompressed)
          curl -L "https://github.com/scriptin/jmdict-simplified/releases/download/3.6.1%2B20251013122507/kanjidic2-en-3.6.1+20251013122507.json.tgz" -o /tmp/kanjidic2.tgz
          tar -xzf /tmp/kanjidic2.tgz -C data/
          mv data/kanjidic2-en-3.6.1+20251013122507.json data/kanjidic2-en-3.6.1.json

          echo "‚úÖ Downloaded JMdict data files"
          ls -lh data/

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build Rust project
        run: |
          echo "üî® Building Rust project..."
          cargo build --release

      - name: Run dictionary build for ${{ matrix.shard-type }}
        run: |
          echo "üéØ Building dictionary shard: ${{ matrix.shard-type }}..."
          echo "‚è±Ô∏è  Start time: $(date)"
          cargo run --release --bin merge_dictionaries -- --individual-files --optimize --mode ${{ matrix.shard-type }}
          echo "‚è±Ô∏è  End time: $(date)"

      - name: Verify output
        run: |
          SHARD_DIR="output_${{ matrix.shard-type }}"
          if [ ! -d "$SHARD_DIR" ]; then
            echo "‚ùå Error: Output directory $SHARD_DIR not found!"
            exit 1
          fi
          
          FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
          TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)
          echo "‚úÖ Generated $FILE_COUNT JSON files in $SHARD_DIR"
          echo "üì¶ Total size: $TOTAL_SIZE"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "‚ùå Error: No JSON files generated!"
            exit 1
          fi
          
          # Verify file count is reasonable (should be ~42K-135K, not 350K)
          if [ "$FILE_COUNT" -gt 200000 ]; then
            echo "‚ö†Ô∏è  WARNING: File count seems too high ($FILE_COUNT files)"
            echo "   This might indicate redirect files are not being filtered correctly"
          fi

      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: Kimeiga/japanese-dict-${{ matrix.shard-type }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: target-repo

      - name: Clear target repository
        run: |
          cd target-repo
          # Remove all files except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          echo "‚úÖ Cleared target repository"

      - name: Copy files to target repository
        run: |
          SHARD_DIR="output_${{ matrix.shard-type }}"
          echo "üìã Copying files from $SHARD_DIR to target-repo..."
          cp -r "$SHARD_DIR"/* target-repo/
          
          FILE_COUNT=$(find target-repo -name "*.json" | wc -l)
          echo "‚úÖ Copied $FILE_COUNT files to target repository"

      - name: Create README
        run: |
          cd target-repo
          cat > README.md << 'EOF'
          # Japanese Dictionary - ${{ matrix.shard-type }} Shard
          
          This repository contains the ${{ matrix.shard-type }} shard of the Japanese-Chinese dictionary.
          
          ## Shard Information
          
          - **Shard Type**: `${{ matrix.shard-type }}`
          - **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Source**: [kiokun-data](https://github.com/Kimeiga/kiokun-data)
          
          ## Usage
          
          Files are served via jsDelivr CDN:
          
          ```
          https://cdn.jsdelivr.net/gh/Kimeiga/japanese-dict-${{ matrix.shard-type }}@main/{word}.json
          ```
          
          ## Shard Types
          
          - `non-han`: Words with no Han characters (kana only)
          - `han-1char`: Words with exactly 1 Han character
          - `han-2char`: Words with exactly 2 Han characters
          - `han-3plus`: Words with 3 or more Han characters
          
          EOF

      - name: Commit and push to target repository
        run: |
          cd target-repo
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          git add -A
          
          FILE_COUNT=$(find . -name "*.json" | wc -l)
          TOTAL_SIZE=$(du -sh . | cut -f1)
          
          echo "üìä Committing changes..."
          echo "   Files: $FILE_COUNT"
          echo "   Size: $TOTAL_SIZE"
          
          git commit -m "Update ${{ matrix.shard-type }} shard dictionary

          - Files: $FILE_COUNT
          - Size: $TOTAL_SIZE
          - Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Source commit: ${{ github.sha }}" || echo "No changes to commit"
          
          echo "üì§ Pushing to GitHub..."
          echo "‚è±Ô∏è  Push start time: $(date)"
          
          # Try to push with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin main; then
              echo "‚úÖ Push successful!"
              echo "‚è±Ô∏è  Push end time: $(date)"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è  Push failed (attempt $RETRY_COUNT/$MAX_RETRIES)"
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "   Retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          echo "‚ùå Push failed after $MAX_RETRIES attempts"
          exit 1

      - name: Verify deployment
        if: success()
        run: |
          echo "üß™ Testing jsDelivr CDN access..."
          
          # Wait a bit for jsDelivr to pick up the changes
          sleep 5
          
          # Test a few random files
          cd target-repo
          SAMPLE_FILES=$(find . -name "*.json" | head -3)
          
          for file in $SAMPLE_FILES; do
            filename=$(basename "$file")
            url="https://cdn.jsdelivr.net/gh/Kimeiga/japanese-dict-${{ matrix.shard-type }}@main/$filename"
            echo "Testing: $url"
            
            # Note: jsDelivr might take a few minutes to cache new files
            curl -f "$url" > /dev/null 2>&1 && echo "  ‚úÖ Accessible" || echo "  ‚ö†Ô∏è  Not yet cached (this is normal)"
          done

      - name: Summary
        if: always()
        run: |
          echo "üìä Deployment Summary for ${{ matrix.shard-type }}"
          echo "================================"
          SHARD_DIR="output_${{ matrix.shard-type }}"
          if [ -d "$SHARD_DIR" ]; then
            FILE_COUNT=$(find "$SHARD_DIR" -name "*.json" | wc -l)
            TOTAL_SIZE=$(du -sh "$SHARD_DIR" | cut -f1)
            echo "Files generated: $FILE_COUNT"
            echo "Total size: $TOTAL_SIZE"
            echo "Target repo: Kimeiga/japanese-dict-${{ matrix.shard-type }}"
            echo "CDN URL: https://cdn.jsdelivr.net/gh/Kimeiga/japanese-dict-${{ matrix.shard-type }}@main/{word}.json"
          else
            echo "‚ùå Build failed - no output directory"
          fi

